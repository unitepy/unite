#!/usr/bin/env unite
import os
import sys

import subprocess

from time import sleep, time
from colorama import Fore, Style
from watchdog.observers import Observer
from watchdog.events import PatternMatchingEventHandler

global process
global cooldown

if len( sys.argv ) == 2:
	event_handler = PatternMatchingEventHandler( patterns = [ '*.py' ] )

	def handle_event( event ):

		global process
		global cooldown

		if time( ) > cooldown:
			if not 'unite-modules' in event.src_path:
				print( 'restart' )
				cooldown = time( ) + 1

		#print( Fore.GREEN + '[ unitemon ] restarting due to changes...' + Style.RESET_ALL )

		#process.terminate( )
		#process = subprocess.Popen( [ sys.executable, sys.argv[ 1 ] ] )

	event_handler.on_any_event = handle_event

	observer = Observer( )
	observer.schedule( event_handler, os.getcwd( ), recursive = True )

	observer.start( )

	cooldown = 0

	#print( Fore.YELLOW + Style.BRIGHT + '\n[ unitemon ] watching directory' + Style.RESET_ALL )

	#process = subprocess.Popen( [sys.executable, sys.argv[ 1 ] ] )
	#print( Fore.GREEN + "[ unitemon ] starting "+ sys.argv[ 1 ] + Style.RESET_ALL)

	try:
		while True:
			sleep( 1 )
	except KeyboardInterrupt:
		observer.stop( )

	observer.join( )
